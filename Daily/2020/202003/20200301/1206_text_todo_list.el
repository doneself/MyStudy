;;text todo list

(defun buffer-text-todo-list ()
  (interactive)
  (let* ((temp-buffer-name "*Text Todo List*")
		 (line-content (remove-if (lambda(item) (< (length item) 3))(split-string (buffer-string) "\n" t)))
		 (todo-text-list (remove-if-not (lambda(item) (string= "[ ]" (substring item 0 3))) line-content))
		 (doned-text-list (remove-if-not (lambda(item) (string= "[√]" (substring item 0 3))) line-content))
		 (dropped-text-list (remove-if-not (lambda(item) (string= "[×]" (substring item 0 3))) line-content)))
	(with-temp-buffer
	  (set-buffer (get-buffer-create temp-buffer-name))
	  (erase-buffer)
	  (insert "Dropped:\n")
	  (mapcar (lambda(item)
				(unless (string-blank-p item)
				  (insert (format "%s\n" item)))) dropped-text-list)
	  (insert "\n\nDoned:\n")
	  (mapcar (lambda(item)
				(unless (string-blank-p item)
				  (insert (format "%s\n" item)))) doned-text-list)
	  (insert "\n\nTodo:\n")
	  (mapcar (lambda(item)
				(unless (string-blank-p item)
				  (insert (format "%s\n" item)))) todo-text-list)
	  (display-line-numbers-mode t)
	  (switch-to-buffer-other-window temp-buffer-name))))
